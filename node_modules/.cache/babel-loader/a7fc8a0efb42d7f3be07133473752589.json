{"ast":null,"code":"import _slicedToArray from\"C:/Users/masum/react_projects/portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useState}from\"react\";import\"./works.scss\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function Works(){var _useState=useState(0),_useState2=_slicedToArray(_useState,2),currentSlide=_useState2[0],setCurrentSlide=_useState2[1];var data=[{id:\"1\",icon:\"./assets/mobile.png\",title:\"Accessible Running Track\",desc:/*#__PURE__*/_jsxs(\"ul\",{children:[/*#__PURE__*/_jsx(\"li\",{children:\"This is a smartphone application to give people with visual impairments feedback on running track.\"}),/*#__PURE__*/_jsx(\"li\",{children:\"While a person walks, the app takes images of the track, processes them and determines the angle of the person.\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Finally, it provides verbal feedback if the person is veering from the track.\"}),/*#__PURE__*/_jsx(\"li\",{children:\"The application was built upon an existing app using C# and OpenCV.\"})]}),img1:\"./assets/csharp.png\",img2:\"./assets/opencv.png\"},{id:\"2\",icon:\"./assets/globe.png\",title:\"GCN Distributed Training\",desc:/*#__PURE__*/_jsxs(\"ul\",{children:[/*#__PURE__*/_jsx(\"li\",{children:\"The system trains Graph Convolutional Network (GCN) in multiple GPUs.\"}),/*#__PURE__*/_jsx(\"li\",{children:\"To maintain the accuracy, the system performs communication efficient sampling.\"}),/*#__PURE__*/_jsx(\"li\",{children:\"The system was evaluated with multiple datasets such as Reddit, Amazon, Ppi etc.\"}),/*#__PURE__*/_jsx(\"li\",{children:\"The system was implemented with Pytorch and Python.\"})]}),img1:\"./assets/pytorch.png\",img2:\"./assets/python.png\"},{id:\"3\",icon:\"./assets/writing.png\",title:\"Mortality & Readmission Prediction\",desc:/*#__PURE__*/_jsxs(\"ul\",{children:[/*#__PURE__*/_jsx(\"li\",{children:\"The system of two generative models for mortality and hospital readmission prediction.\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Tested the models on Uiowa Healthcare data.\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Wrote SQL query to retrieve necessary part of the data.\"}),/*#__PURE__*/_jsx(\"li\",{children:\"The system was implemented with Pytorch and Python.\"})]}),img1:\"./assets/python.png\",img2:\"./assets/SQL.png\"}];var handleClick=function handleClick(way){way===\"left\"?setCurrentSlide(currentSlide>0?currentSlide-1:2):setCurrentSlide(currentSlide<data.length-1?currentSlide+1:0);};return/*#__PURE__*/_jsxs(\"div\",{className:\"works\",id:\"works\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Projects\"}),/*#__PURE__*/_jsx(\"div\",{className:\"slider\",style:{transform:\"translateX(-\".concat(currentSlide*100,\"vw)\")},children:data.map(function(d){return/*#__PURE__*/_jsx(\"div\",{className:\"container\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"item\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"left\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"leftContainer\",children:[/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"h3\",{children:d.title}),/*#__PURE__*/_jsx(\"span\",{children:d.desc})]})}),/*#__PURE__*/_jsxs(\"div\",{className:\"right\",children:[/*#__PURE__*/_jsx(\"img\",{src:d.img1,alt:\"\"}),/*#__PURE__*/_jsx(\"img\",{src:d.img2,alt:\"\"})]})]})});})}),/*#__PURE__*/_jsx(\"img\",{src:\"assets/right-arrow-icon.jpg\",className:\"arrow left\",alt:\"\",onClick:function onClick(){return handleClick(\"left\");}}),/*#__PURE__*/_jsx(\"img\",{src:\"assets/right-arrow-icon.jpg\",className:\"arrow right\",alt:\"\",onClick:function onClick(){return handleClick();}}),/*#__PURE__*/_jsx(\"a\",{href:\"#testimonials\",children:/*#__PURE__*/_jsx(\"img\",{src:\"assets/down.png\",alt:\"\",className:\"downarrow\"})})]});}","map":{"version":3,"sources":["C:/Users/masum/react_projects/portfolio/src/components/works/Works.jsx"],"names":["useState","Works","currentSlide","setCurrentSlide","data","id","icon","title","desc","img1","img2","handleClick","way","length","transform","map","d"],"mappings":"8JAAA,OAASA,QAAT,KAAyB,OAAzB,CACA,MAAO,cAAP,C,wFAEA,cAAe,SAASC,CAAAA,KAAT,EAAiB,CAC9B,cAAwCD,QAAQ,CAAC,CAAD,CAAhD,wCAAOE,YAAP,eAAqBC,eAArB,eACA,GAAMC,CAAAA,IAAI,CAAG,CACX,CACEC,EAAE,CAAE,GADN,CAEEC,IAAI,CAAE,qBAFR,CAGEC,KAAK,CAAE,0BAHT,CAIEC,IAAI,cAEF,mCACE,0HADF,cAEE,uIAFF,cAGE,qGAHF,cAIE,2FAJF,GANJ,CAaEC,IAAI,CAAE,qBAbR,CAcEC,IAAI,CAAE,qBAdR,CADW,CAiBX,CACEL,EAAE,CAAE,GADN,CAEEC,IAAI,CAAE,oBAFR,CAGEC,KAAK,CAAE,0BAHT,CAIEC,IAAI,cACF,mCACE,6FADF,cAEE,uGAFF,cAGE,wGAHF,cAIE,2EAJF,GALJ,CAWEC,IAAI,CAAE,sBAXR,CAYEC,IAAI,CAAE,qBAZR,CAjBW,CAiCX,CACEL,EAAE,CAAE,GADN,CAEEC,IAAI,CAAE,sBAFR,CAGEC,KAAK,CAAE,oCAHT,CAIEC,IAAI,cACF,mCACE,8GADF,cAEE,mEAFF,cAGE,+EAHF,cAIE,2EAJF,GALJ,CAYEC,IAAI,CAAE,qBAZR,CAaEC,IAAI,CAAE,kBAbR,CAjCW,CAAb,CAkDA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,GAAD,CAAS,CAC3BA,GAAG,GAAK,MAAR,CACIT,eAAe,CAACD,YAAY,CAAG,CAAf,CAAmBA,YAAY,CAAG,CAAlC,CAAsC,CAAvC,CADnB,CAEIC,eAAe,CAACD,YAAY,CAAGE,IAAI,CAACS,MAAL,CAAc,CAA7B,CAAiCX,YAAY,CAAG,CAAhD,CAAoD,CAArD,CAFnB,CAGD,CAJD,CAMA,mBAEE,aAAK,SAAS,CAAC,OAAf,CAAuB,EAAE,CAAC,OAA1B,wBACE,gCADF,cAIE,YACE,SAAS,CAAC,QADZ,CAEE,KAAK,CAAE,CAAEY,SAAS,uBAAiBZ,YAAY,CAAG,GAAhC,OAAX,CAFT,UAIGE,IAAI,CAACW,GAAL,CAAS,SAACC,CAAD,qBACR,YAAK,SAAS,CAAC,WAAf,uBAEE,aAAK,SAAS,CAAC,MAAf,wBAEE,YAAK,SAAS,CAAC,MAAf,uBAEE,aAAK,SAAS,CAAC,eAAf,wBAKE,aALF,cAME,oBAAKA,CAAC,CAACT,KAAP,EANF,cAOE,sBAAOS,CAAC,CAACR,IAAT,EAPF,GAFF,EAFF,cAgBE,aAAK,SAAS,CAAC,OAAf,wBAEE,YAAK,GAAG,CAAEQ,CAAC,CAACP,IAAZ,CAAkB,GAAG,CAAC,EAAtB,EAFF,cAGE,YAAK,GAAG,CAAEO,CAAC,CAACN,IAAZ,CAAkB,GAAG,CAAC,EAAtB,EAHF,GAhBF,GAFF,EADQ,EAAT,CAJH,EAJF,cAqCE,YACE,GAAG,CAAC,6BADN,CAEE,SAAS,CAAC,YAFZ,CAGE,GAAG,CAAC,EAHN,CAIE,OAAO,CAAE,yBAAMC,CAAAA,WAAW,CAAC,MAAD,CAAjB,EAJX,EArCF,cA2CE,YACE,GAAG,CAAC,6BADN,CAEE,SAAS,CAAC,aAFZ,CAGE,GAAG,CAAC,EAHN,CAIE,OAAO,CAAE,yBAAMA,CAAAA,WAAW,EAAjB,EAJX,EA3CF,cAkDE,UAAG,IAAI,CAAC,eAAR,uBACI,YAAK,GAAG,CAAC,iBAAT,CAA2B,GAAG,CAAC,EAA/B,CAAkC,SAAS,CAAC,WAA5C,EADJ,EAlDF,GAFF,CAyDD","sourcesContent":["import { useState } from \"react\";\nimport \"./works.scss\";\n\nexport default function Works() {\n  const [currentSlide, setCurrentSlide] = useState(0);\n  const data = [\n    {\n      id: \"1\",\n      icon: \"./assets/mobile.png\",\n      title: \"Accessible Running Track\",\n      desc:\n      \n        <ul>\n          <li>This is a smartphone application to give people with visual impairments feedback on running track.</li>\n          <li>While a person walks, the app takes images of the track, processes them and determines the angle of the person.</li>\n          <li>Finally, it provides verbal feedback if the person is veering from the track.</li>\n          <li>The application was built upon an existing app using C# and OpenCV.</li>\n        </ul>,\n        \n      img1: \"./assets/csharp.png\",\n      img2: \"./assets/opencv.png\",\n    },\n    {\n      id: \"2\",\n      icon: \"./assets/globe.png\",\n      title: \"GCN Distributed Training\",\n      desc:           \n        <ul>\n          <li>The system trains Graph Convolutional Network (GCN) in multiple GPUs.</li>\n          <li>To maintain the accuracy, the system performs communication efficient sampling.</li>\n          <li>The system was evaluated with multiple datasets such as Reddit, Amazon, Ppi etc.</li>\n          <li>The system was implemented with Pytorch and Python.</li>\n        </ul>,\n      img1: \"./assets/pytorch.png\",\n      img2: \"./assets/python.png\",\n      \n  \n    },\n    {\n      id: \"3\",\n      icon: \"./assets/writing.png\",\n      title: \"Mortality & Readmission Prediction\",\n      desc:\n        <ul>\n          <li>The system of two generative models for mortality and hospital readmission prediction.</li>\n          <li>Tested the models on Uiowa Healthcare data.</li>\n          <li>Wrote SQL query to retrieve necessary part of the data.</li>\n          <li>The system was implemented with Pytorch and Python.</li>\n        </ul>,\n  \n      img1: \"./assets/python.png\",\n      img2: \"./assets/SQL.png\",\n    },\n  ];\n\n  const handleClick = (way) => {\n    way === \"left\"\n      ? setCurrentSlide(currentSlide > 0 ? currentSlide - 1 : 2)\n      : setCurrentSlide(currentSlide < data.length - 1 ? currentSlide + 1 : 0);\n  };\n  \n  return (\n    \n    <div className=\"works\" id=\"works\">\n      <h1>Projects</h1>\n      \n       \n      <div\n        className=\"slider\"\n        style={{ transform: `translateX(-${currentSlide * 100}vw)` }}\n      >\n        {data.map((d) => (\n          <div className=\"container\">\n            \n            <div className=\"item\">\n            \n              <div className=\"left\">\n                \n                <div className=\"leftContainer\">\n                  {/* <div className=\"imgContainer\">\n                    <img src={d.icon} alt=\"\" />\n                  </div> */}\n                 \n                  <br/> \n                  <h3>{d.title}</h3>\n                  <span>{d.desc}</span>\n                  \n                  {/* <span>Projects</span> */}\n                </div>\n              </div>\n              <div className=\"right\">\n                {/* <h2>Technology Used</h2> */} \n                <img src={d.img1} alt=\"\" />\n                <img src={d.img2} alt=\"\" />\n                \n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n      <img\n        src=\"assets/right-arrow-icon.jpg\"\n        className=\"arrow left\"\n        alt=\"\"\n        onClick={() => handleClick(\"left\")}\n      />\n      <img\n        src=\"assets/right-arrow-icon.jpg\"\n        className=\"arrow right\"\n        alt=\"\"\n        onClick={() => handleClick()}\n      />\n\n      <a href=\"#testimonials\">\n          <img src=\"assets/down.png\" alt=\"\" className=\"downarrow\"/>\n      </a>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}